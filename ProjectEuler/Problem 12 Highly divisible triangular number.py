# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?



def DivisorNumber(target_number):
	divisor_number_dict = {}
	while target_number != 1:
		for i in range(2,target_number+1):
			if target_number % i == 0:
				# print target_number,i
				if i not in divisor_number_dict:
					divisor_number_dict[i] = 1
				elif i in divisor_number_dict:
					divisor_number_dict[i] += 1
				target_number /= i
				break
			if target_number == i:
				if i not in divisor_number_dict:
					divisor_number_dict[i] = 1
				elif i in divisor_number_dict:
					divisor_number_dict[i] += 1
				break
	# print divisor_number_dict		
	prodocut = 1		
	for values in divisor_number_dict.values():
		# print "values",values
		xx = values + 1
		# print "xxvalues",xx
		prodocut *= xx
		# print "prodocut" ,prodocut
	return prodocut	



running = True
start_number = 1
triangle_number = 1
while running:
	dn = DivisorNumber(triangle_number)
	print triangle_number,dn
	# print "---------------------------------"
	start_number += 1
	triangle_number += start_number
	
	if dn > 500:
		running = False
	
